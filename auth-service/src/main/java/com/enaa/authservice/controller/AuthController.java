package com.enaa.authservice.controller;

import com.enaa.authservice.dto.LoginRequest;
import com.enaa.authservice.dto.SignupRequest;
import com.enaa.authservice.dto.Token;
import com.enaa.authservice.security.JwtUtils;
import com.enaa.authservice.service.AuthService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
@CrossOrigin("*")
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private AuthService authService;

    @Autowired
    private JwtUtils jwtUtils;

    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    public Token registerUser(@Valid @RequestBody SignupRequest signupRequest) {
        // Register the user first
        authService.save(new com.enaa.authservice.entity.User(
                null, // ID will be generated by DB
                signupRequest.getUsername(),
                signupRequest.getPassword(),
                com.enaa.authservice.entity.Role.valueOf(signupRequest.getRole().toUpperCase())
        ));

        // Authenticate the newly registered user
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        signupRequest.getUsername(),
                        signupRequest.getPassword()
                )
        );

        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Generate and return JWT token
        return new Token(jwtUtils.generateJwtToken(authentication));
    }

    @PostMapping("/login")
    public Token authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(),
                        loginRequest.getPassword()
                )
        );

        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Generate and return JWT token
        return new Token(jwtUtils.generateJwtToken(authentication));

    }
}